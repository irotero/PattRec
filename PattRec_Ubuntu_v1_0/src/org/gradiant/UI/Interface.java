/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gradiant.UI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.gradiant.utils.Commons;
import org.gradiant.utils.Credential;

/**
 *
 * @author ncanle
 */
public class Interface extends javax.swing.JFrame {

    String filename_BED = null;
    File BedFile;
    File file_test = null;
    String filename_BamControl = null;
    String filename_fasta = null;
    File[] files_control = new File[0];
    String thres, output;
    Credential cred;
    float r,g,b;
    
    public Interface () {
        initInterface();
    }
 
    public Interface(File file_test, String filename_BED, File[] files_control, String filename_fasta) {
        initInterface();
        // set predefined files
        jTextField1.setText(file_test.getAbsolutePath());
        this.file_test = file_test;
        for(File file : files_control) {
            jTextArea2.append(file.getAbsolutePath() + "\n" );
        }
        this.files_control = files_control;
        jTextField3.setText(filename_BED);
        this.filename_BED = filename_BED;
        jTextField2.setText(filename_fasta);
        this.filename_fasta = filename_fasta;
    }
    
    private void initInterface() {
        this.b = 1;
        initComponents();
        //getContentPane().setBackground(Color.getHSBColor(20,25,243));//rosa
        getContentPane().setBackground(new Color(239,243,255));//azul
        //getContentPane().setBackground(Color.getHSBColor(50,47,255));//gris
        //getContentPane().setBackground(Color.getHSBColor(60,49,250));//verde agua
        //getContentPane().setBackground(Color.getHSBColor(190,3,120));
        setLocationRelativeTo(null);
        setResizable(true);
        setTitle("Sample Analysis");
        
        Image icon;
        try {
            icon = ImageIO.read(new FileInputStream(Commons.resDir + "res/icons/gridd.png"));
            setIconImage(icon);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.WARNING, null, ex);
        }
        
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jOptionPane1 = new javax.swing.JOptionPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Boton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Boton2 = new javax.swing.JButton();
        Boton3 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        runAR_CNV = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        confDB = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        deleteDB = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(243, 182, 120));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(237, 63, 63));
        setPreferredSize(new java.awt.Dimension(800, 690));

        jScrollPane3.setBorder(null);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(800, 690));

        jPanel1.setBackground(new java.awt.Color(239, 243, 255));
        jPanel1.setBorder(null);
        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setPreferredSize(new java.awt.Dimension(780, 660));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(61, 91, 183));
        jLabel3.setText("BAM test:");

        Boton1.setText("find");
        Boton1.setPreferredSize(new java.awt.Dimension(50, 29));
        Boton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setAlignmentX(runAR_CNV.getAlignmentX());

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(61, 91, 183));
        jLabel4.setText("BAM controls:");

        Boton2.setText("add");
        Boton2.setPreferredSize(new java.awt.Dimension(39, 29));
        Boton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton2ActionPerformed(evt);
            }
        });

        Boton3.setText("find");
        Boton3.setPreferredSize(new java.awt.Dimension(50, 29));
        Boton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton3ActionPerformed(evt);
            }
        });

        jTextField3.setEditable(false);
        jTextField3.setAlignmentX(runAR_CNV.getAlignmentX());
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(61, 91, 183));
        jLabel6.setText("BED file:");

        runAR_CNV.setText("RUN");
        runAR_CNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runAR_CNVActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setAlignmentX(runAR_CNV.getAlignmentX());

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(19, 21, 136));
        jLabel5.setText("CNV Detection");
        jLabel5.setMinimumSize(new java.awt.Dimension(80, 17));

        jScrollPane2.setAlignmentX(runAR_CNV.getAlignmentX());

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setAlignmentX(runAR_CNV.getAlignmentX());
        jScrollPane2.setViewportView(jTextArea2);

        jTextField2.setAlignmentX(runAR_CNV.getAlignmentX());

        jButton4.setText("find");
        jButton4.setPreferredSize(new java.awt.Dimension(50, 29));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(61, 91, 183));
        jLabel2.setText("FASTA file:");

        confDB.setText("Database configuration");
        confDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confDBActionPerformed(evt);
            }
        });

        jButton1.setText("clear all");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("clear");
        jButton2.setPreferredSize(new java.awt.Dimension(50, 29));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        deleteDB.setText("Clear database");
        deleteDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Boton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Boton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Boton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(deleteDB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confDB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(runAR_CNV, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel4)
                        .addGap(95, 95, 95)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Boton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Boton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Boton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(runAR_CNV, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Boton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton1ActionPerformed
        jTextArea1.setText("");
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BAM FILES", "bam");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        file_test = chooser.getSelectedFile();

        if(file_test != null) {
            if(file_test.getAbsolutePath().endsWith(".bam") == false) {
                file_test = null;
                jTextField1.setText("ERROR: selected file is not a bam file");
            } else {
                jTextField1.setText(file_test.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_Boton1ActionPerformed

    private void Boton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton2ActionPerformed
        jTextArea1.setText("");
        JFileChooser chooser2 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BAM FILES", "bam");
        chooser2.setFileFilter(filter);
        chooser2.setMultiSelectionEnabled(true);
        chooser2.showOpenDialog(null);
        File[] selected = chooser2.getSelectedFiles();

        if(selected != null && selected.length > 0) { // If we select no files...
            for (File file_control : selected) {
                if(file_control.getAbsolutePath().endsWith(".bam") == false) {
                    selected = null; // ... or select files with no bam extension, we ignore them
                    break;
                }
            }
            
            if(selected != null) {
                filename_BamControl = selected[0].getAbsolutePath();
                // Concatenate files_control and selected
                files_control = concat(files_control, selected);
                
                jTextArea2.setText("");
                for(File file : files_control) {
                    jTextArea2.append(file.getAbsolutePath() + "\n" );
                }
            }
        }
    }//GEN-LAST:event_Boton2ActionPerformed

    private void Boton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton3ActionPerformed
        jTextArea1.setText("");
        JFileChooser chooser3 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("BED FILES", "bed");
        chooser3.setFileFilter(filter);
        chooser3.showOpenDialog(null);
        File f_bed = chooser3.getSelectedFile();
        filename_BED = f_bed.getAbsolutePath();
        
        if(filename_BED != null) {
            if(filename_BED.endsWith(".bed") == false) {
                filename_BED = null;
                jTextField3.setText("ERROR: selected file is not a bed file");
            } else {
                jTextField3.setText(filename_BED);
            }
        }
    }//GEN-LAST:event_Boton3ActionPerformed

    private void runAR_CNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runAR_CNVActionPerformed
        jTextArea1.setText("");
        
        int flag = 0;

        if (file_test == null) {
            jTextArea1.setText("ERROR: Introduce BAM Test file\n");
            flag = 1;
        }
        if (files_control.length == 0) {
            jTextArea1.append("ERROR: Introduce BAM Control file\n");
            flag = 1;
        }
        if (filename_BED == null) {
            jTextArea1.append("ERROR: Introduce BED file\n");
            flag = 1;
        }
        if(filename_fasta == null) {
            jTextArea1.append("ERROR: Introduce FASTA file\n");
            flag = 1;
        }
        
        if (flag == 0) {
            getCredentials();
            if (cred != null) {
                RCNV obj = new RCNV(file_test, filename_BED, files_control, filename_fasta, cred);
                obj.setVisible(true);
                dispose();
            } else {
                jTextArea1.append("Database should be configured properly to execute PattRec\n");
            }
        }

    }//GEN-LAST:event_runAR_CNVActionPerformed


    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextArea1.setText("");
        JFileChooser chooser4 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("FASTA FILES", "fa", "fasta");
        chooser4.setFileFilter(filter);
        chooser4.showOpenDialog(null);
        
        if(chooser4.getSelectedFile() != null) {
            filename_fasta = chooser4.getSelectedFile().getAbsolutePath();
            if(filename_fasta.endsWith(".fa") == false && filename_fasta.endsWith(".fasta") == false) {
                filename_fasta = null;
                jTextField2.setText("ERROR: selected file is not a fasta file");
            } else {
                jTextField2.setText(filename_fasta);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void confDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confDBActionPerformed
        JPanel panel = new JPanel(new BorderLayout(5, 5));

        JPanel label = new JPanel(new GridLayout(0, 1, 2, 2));
        label.add(new JLabel("User", SwingConstants.RIGHT));
        label.add(new JLabel("Password", SwingConstants.RIGHT));
        panel.add(label, BorderLayout.WEST);

        JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
        JTextField username = new JTextField();
        controls.add(username);
        JPasswordField password = new JPasswordField();
        controls.add(password);
        panel.add(controls, BorderLayout.CENTER);

        int reply = JOptionPane.showConfirmDialog(this, panel, "Login into database", JOptionPane.OK_CANCEL_OPTION);
        
        if (reply == JOptionPane.OK_OPTION) {
            // Crear objeto Credentials en el atributo de clase
            cred = new Credential(username.getText(), String.valueOf(password.getPassword()));

            jTextArea1.append("Connecting to the database...\n");
            runAR_CNV.setEnabled(false);
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost", cred.getUser(), cred.getPassword());
                Statement stat = conn.createStatement();
                stat.executeUpdate("create database if not exists CNV;");
                stat.executeUpdate("use CNV;");
                stat.executeUpdate("create table if not exists CNV_global ( "
                                    + "Sample text not null, "
                                    + "Chr text not null, "
                                    + "Start double not null default 0, "
                                    + "End double not null default 0, "
                                    + "Gene text, "
                                    + "Type text, "
                                    + "Percentage double default null, "
                                    + "primary key (Sample(200), Chr(200), Start, End));");

                // Usar la siguiente sentencia si se ha actualizado el jdbc driver
                // if(conn.getMetaData().getTables(null, null, "exones_list", null).next() == false)

                // Si no existe la tabla exones_list...
                if(conn.getMetaData().getTables("CNV", null, "exones_list", null).next() == false)
                    executeSQLScript(stat, Commons.resDir + "database/exones_list.sql"); //TODO: set $ENV path

                stat.close();
                conn.close();

                // Guardar objeto con las credenciales en el archivo
                saveCredentials(cred);
                jTextArea1.append("Database is now properly configured!\n");
            } catch(Exception e) {
                e.printStackTrace();
                jTextArea1.append("ERROR: could not access to the database\n");

                // remove database conf, if exists
                try {
                    Runtime.getRuntime().exec("rm " + Commons.baseDir + ".database.conf").waitFor();
                    cred = null;
                } catch (IOException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            } finally {
                runAR_CNV.setEnabled(true);
            }
        }
    }//GEN-LAST:event_confDBActionPerformed

    private void saveCredentials (Credential cred) throws IOException {
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(Commons.baseDir + ".database.conf"));
        oos.writeObject(cred);
        oos.close();
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Clear files here
        jTextField1.setText("");
        jTextArea2.setText("");
        jTextField3.setText("");
        jTextField2.setText("");
        filename_BED = null;
        BedFile = null;
        file_test = null;
        filename_BamControl = null;
        filename_fasta = null;
        files_control = new File[0];
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // clear control files here
        jTextArea2.setText("");
        filename_BamControl = null;
        files_control = new File[0];
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deleteDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDBActionPerformed

        int reply = JOptionPane.showConfirmDialog(this, "Are you sure you want to clear database content?", "Clear database", JOptionPane.OK_CANCEL_OPTION);
        if (reply == JOptionPane.OK_OPTION) {
            getCredentials();
            if (cred != null) {
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost", cred.getUser(), cred.getPassword());
                    Statement stat = conn.createStatement();
                    stat.executeUpdate("use CNV;");
                    stat.executeUpdate("truncate table CNV_global;"); // truncate will delete auto-incremental fields (use 'delete' if this is not possible)
                    stat.close();
                    conn.close();
                    jTextArea1.append("Database content was removed\n");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    jTextArea1.append("ERROR: could not delete database content\n");
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            } else {
                jTextArea1.append("You should configure database credentials first\n");
            }
            
        }
    }//GEN-LAST:event_deleteDBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
                
        }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Boton1;
    private javax.swing.JButton Boton2;
    private javax.swing.JButton Boton3;
    private javax.swing.JButton confDB;
    private javax.swing.JButton deleteDB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton runAR_CNV;
    // End of variables declaration//GEN-END:variables

    private File[] concat(File[] a, File[] b) {
        int aLen = a.length;
        int bLen = b.length;
        File[] c= new File[aLen + bLen];

        System.arraycopy(a, 0, c, 0, aLen);
        System.arraycopy(b, 0, c, aLen, bLen);
        
        return c;
    }

    private void getCredentials() {
        // Consegir credenciales
        // Si existe el archivo, leer
        // Si no, pedir credenciales
        if((new File(Commons.baseDir + ".database.conf")).isFile()) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Commons.baseDir + ".database.conf"));
                cred = (Credential) ois.readObject();
                ois.close();
            } catch (Exception ex) {
                confDBActionPerformed(null);
            }
        } else {
            confDBActionPerformed(null);
        }
    }

    private void executeSQLScript(Statement stat, String file) throws FileNotFoundException, SQLException {
        Scanner scanner = new Scanner(new FileInputStream(file));
        String command;
        jTextArea1.append("Initializing database... (this could take a few seconds)\n");
        
        while(scanner.hasNextLine()) {
            command = scanner.nextLine().trim();
            
            if(command.isEmpty() == false)
                stat.execute(command);
        }
        
        scanner.close();
    }
}
